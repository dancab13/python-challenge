# Module 3 Challenge - PyPoll# Import the standard modulesimport osimport csv# Import the csv file and make sure Python can read it using the csv library or module.democracy = os.path.join('Resources', 'election_data.csv')# Open the filewith open(democracy) as csvfile:        # Initiatlize the csv file and define it    election = (csv.reader(csvfile, delimiter=','))        # Store the header row     csv_header = next(election)        #Define variables    candidate_list = []    candidate_names = []    candidate_count = []    candidate_percentage = []    candidate_dict = {}    previous_row = None    current_row = None    count = 0    percentage = 0        # Loop through the rows in the file and add the candidate names to a new    ## list (created above), then count the length of the list, which    ## gives you the total number of votes (each row is one vote)    for row in election:        candidate_list.append(row[2])        vote_total = len(candidate_list)        # With the new list of candidate names, loop through the list to collect    ## each unique name in a list (in the loop, when adding the name, the loop    ## checks if the name is already in the list; if it is, it ignores the    ## names, and if it isn't, it adds the name). Use the count function to    ## count how many times each candidate's name appears in the list. Find    ## the percentage of votes by dividing the individual candidate's votes by    ## the total number of votes (which is already collected) and add those    ## values to a new list.    for row in candidate_list:         current_row = row        if previous_row is not current_row and previous_row not in candidate_names:            candidate_names.append(current_row)            count = candidate_list.count(current_row)            candidate_count.append(count)            percentage = (count/vote_total) * 100            candidate_percentage.append(round(percentage, 3))        previous_row = row        # Find the max number of votes to find the winner.    most_votes = max(candidate_count)    # Zip together the three lists to create a table of all the data.    table = list(zip(candidate_names, candidate_percentage, candidate_count))        # Start printing the results.    print("\nElection Results\n\n-------------------------\n")    print(f"Total Votes: {vote_total}\n\n-------------------------\n")    # Go through the table and print each row using the formatting we want.    ## Then find the max in the table and collect the corresponding value in     ## the column that has the candidate's names.    for row in table:        print(f'{row[0]}: {row[1]}% ({row[2]})\n')        if row[2] == most_votes:            winner = row[0]     print("-------------------------\n")    print(f'Winner: {winner}')# And save as a new .txt file (there's probably an easier way to do this other## than copying and pasting everything).output_path = (os.path.join("analysis", "PyPoll_Results.txt"))with open(output_path, "w") as text_file:    print("\nElection Results\n\n-------------------------\n", file = text_file)    print(f"Total Votes: {vote_total}\n\n-------------------------\n", file = text_file)    for row in table:        print(f'{row[0]}: {row[1]}% ({row[2]})\n', file = text_file)        if row[2] == most_votes:            winner = row[0]     print("-------------------------\n", file = text_file)    print(f'Winner: {winner}', file = text_file)